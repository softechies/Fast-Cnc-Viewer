import nodemailer from 'nodemailer';
import { Model } from '@shared/schema';
import { Language } from '../client/src/lib/translations';

// Konfiguracja do użycia z Gmail
let transporterGmail: nodemailer.Transporter | null = null;

// Tłumaczenia dla wiadomości e-mail
const EMAIL_TRANSLATIONS = {
  en: {
    email: {
      shareSubject: 'CAD Model has been shared with you',
      shareTitle: 'CAD Model Sharing',
      modelShared: 'A CAD model {filename} has been shared with you',
      viewInstructions: 'You can view it by clicking the button below:',
      viewModel: 'View Model',
      viewAt: 'View at',
      accessPassword: 'Access password',
      linkActiveText: 'This link will be active',
      until: 'until',
      untilRevoked: 'until revoked by the owner',
      autoGeneratedMessage: 'This is an automated message. Please do not reply.',
      sharingRevokedSubject: 'Sharing of CAD model {filename} has been revoked',
      sharingRevokedTitle: 'CAD Model Sharing Revoked',
      sharingRevokedText: 'The sharing of CAD model {filename} has been revoked by the owner',
      linkNoLongerWorks: 'The link you received earlier no longer works.'
    }
  },
  pl: {
    email: {
      shareSubject: 'Model CAD został z Tobą udostępniony',
      shareTitle: 'Udostępnianie modelu CAD',
      modelShared: 'Model CAD {filename} został Tobie udostępniony',
      viewInstructions: 'Możesz go zobaczyć klikając przycisk poniżej:',
      viewModel: 'Zobacz model',
      viewAt: 'Zobacz pod adresem',
      accessPassword: 'Hasło dostępu',
      linkActiveText: 'Ten link będzie aktywny',
      until: 'do',
      untilRevoked: 'dopóki nie zostanie cofnięty przez właściciela',
      autoGeneratedMessage: 'To jest automatyczna wiadomość. Prosimy nie odpowiadać.',
      sharingRevokedSubject: 'Udostępnianie modelu CAD {filename} zostało cofnięte',
      sharingRevokedTitle: 'Cofnięto udostępnianie modelu CAD',
      sharingRevokedText: 'Udostępnianie modelu CAD {filename} zostało cofnięte przez właściciela',
      linkNoLongerWorks: 'Link, który otrzymałeś wcześniej, już nie działa.'
    }
  },
  de: {
    email: {
      shareSubject: 'Ein CAD-Modell wurde mit Ihnen geteilt',
      shareTitle: 'CAD-Modell-Freigabe',
      modelShared: 'Ein CAD-Modell {filename} wurde mit Ihnen geteilt',
      viewInstructions: 'Sie können es anzeigen, indem Sie auf die Schaltfläche unten klicken:',
      viewModel: 'Modell anzeigen',
      viewAt: 'Anzeigen unter',
      accessPassword: 'Zugriffspasswort',
      linkActiveText: 'Dieser Link wird aktiv sein',
      until: 'bis',
      untilRevoked: 'bis er vom Eigentümer widerrufen wird',
      autoGeneratedMessage: 'Dies ist eine automatische Nachricht. Bitte antworten Sie nicht.',
      sharingRevokedSubject: 'Die Freigabe des CAD-Modells {filename} wurde widerrufen',
      sharingRevokedTitle: 'CAD-Modell-Freigabe widerrufen',
      sharingRevokedText: 'Die Freigabe des CAD-Modells {filename} wurde vom Eigentümer widerrufen',
      linkNoLongerWorks: 'Der Link, den Sie zuvor erhalten haben, funktioniert nicht mehr.'
    }
  },
  cs: {
    email: {
      shareSubject: 'CAD model byl s vámi sdílen',
      shareTitle: 'Sdílení CAD modelu',
      modelShared: 'CAD model {filename} byl s vámi sdílen',
      viewInstructions: 'Můžete si jej prohlédnout kliknutím na tlačítko níže:',
      viewModel: 'Zobrazit model',
      viewAt: 'Zobrazit na adrese',
      accessPassword: 'Přístupové heslo',
      linkActiveText: 'Tento odkaz bude aktivní',
      until: 'do',
      untilRevoked: 'dokud nebude odvolán vlastníkem',
      autoGeneratedMessage: 'Toto je automatická zpráva. Neodpovídejte na ni prosím.',
      sharingRevokedSubject: 'Sdílení CAD modelu {filename} bylo zrušeno',
      sharingRevokedTitle: 'Sdílení CAD modelu bylo zrušeno',
      sharingRevokedText: 'Sdílení CAD modelu {filename} bylo zrušeno vlastníkem',
      linkNoLongerWorks: 'Odkaz, který jste dříve obdrželi, již nefunguje.'
    }
  },
  fr: {
    email: {
      shareSubject: 'Un modèle CAO a été partagé avec vous',
      shareTitle: 'Partage de modèle CAO',
      modelShared: 'Un modèle CAO {filename} a été partagé avec vous',
      viewInstructions: 'Vous pouvez le voir en cliquant sur le bouton ci-dessous:',
      viewModel: 'Voir le modèle',
      viewAt: 'Voir à',
      accessPassword: 'Mot de passe d\'accès',
      linkActiveText: 'Ce lien sera actif',
      until: 'jusqu\'au',
      untilRevoked: 'jusqu\'à ce qu\'il soit révoqué par le propriétaire',
      autoGeneratedMessage: 'Ceci est un message automatique. Veuillez ne pas répondre.',
      sharingRevokedSubject: 'Le partage du modèle CAO {filename} a été révoqué',
      sharingRevokedTitle: 'Partage de modèle CAO révoqué',
      sharingRevokedText: 'Le partage du modèle CAO {filename} a été révoqué par le propriétaire',
      linkNoLongerWorks: 'Le lien que vous avez reçu précédemment ne fonctionne plus.'
    }
  }
};

// Funkcja zwracająca tłumaczenia dla danego języka
function getLanguageTranslations(language: Language) {
  return EMAIL_TRANSLATIONS[language] || EMAIL_TRANSLATIONS.en;
}

interface GmailConfig {
  user: string;      // Adres email Gmail
  pass: string;      // Hasło aplikacji (App Password) z Gmail
  from?: string;     // Nagłówek "From" w wiadomościach (może być inny niż adres)
}

/**
 * Inicjalizuje serwis email na bazie konta Gmail
 */
export function initializeGmailService(config: GmailConfig): boolean {
  try {
    if (!config.user || !config.pass) {
      console.warn("Gmail credentials are missing, email notifications will not work correctly");
      return false;
    }
    
    // Inicjalizacja transportera Gmail
    transporterGmail = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: config.user,
        pass: config.pass,
      },
    });
    
    console.log("Gmail email service initialized successfully");
    return true;
  } catch (error) {
    console.error("Failed to initialize Gmail email service:", error);
    return false;
  }
}

/**
 * Wysyła e-mail z linkiem do udostępnionego modelu przez Gmail
 */
export async function sendShareNotificationGmail(
  model: Model, 
  recipient: string, 
  baseUrl: string,
  password?: string,
  language: Language = 'en'
): Promise<boolean> {
  if (!transporterGmail) {
    console.error('Gmail email service not initialized');
    return false;
  }
  
  // Pobierz adres email z konfiguracji lub zmiennych środowiskowych
  const fromEmail = process.env.GMAIL_FROM || process.env.GMAIL_USER || '"CAD Viewer App" <no-reply@cadviewer.app>';
  
  try {
    const shareUrl = `${baseUrl}/shared/${model.shareId}`;
    
    // Pobierz tłumaczenia dla wybranego języka
    const translations = getLanguageTranslations(language);
    
    const mailOptions = {
      from: fromEmail,
      to: recipient,
      subject: translations.email.shareSubject,
      html: `
        <h2>${translations.email.shareTitle}</h2>
        <p>${translations.email.modelShared.replace('{filename}', `<strong>${model.filename}</strong>`)}</p>
        <p>${translations.email.viewInstructions}</p>
        <p><a href="${shareUrl}" style="padding: 10px 20px; background-color: #4F46E5; color: white; text-decoration: none; border-radius: 5px;">
          ${translations.email.viewModel}
        </a></p>
        ${password ? `<p><strong>${translations.email.accessPassword}:</strong> ${password}</p>` : ''}
        <p>${translations.email.linkActiveText} ${model.shareExpiryDate 
          ? `${translations.email.until} ${new Date(model.shareExpiryDate).toLocaleDateString(language)}` 
          : translations.email.untilRevoked}.</p>
        <hr />
        <p style="color: #666; font-size: 12px;">
          ${translations.email.autoGeneratedMessage}
        </p>
      `,
      text: `
        ${translations.email.shareTitle}
        
        ${translations.email.modelShared.replace('{filename}', model.filename)}
        
        ${translations.email.viewAt}: ${shareUrl}
        
        ${password ? `${translations.email.accessPassword}: ${password}` : ''}
        
        ${translations.email.linkActiveText} ${model.shareExpiryDate 
          ? `${translations.email.until} ${new Date(model.shareExpiryDate).toLocaleDateString(language)}` 
          : translations.email.untilRevoked}.
        
        ${translations.email.autoGeneratedMessage}
      `
    };
    
    const info = await transporterGmail.sendMail(mailOptions);
    console.log('Gmail email sent, message ID:', info.messageId);
    return true;
  } catch (error) {
    console.error('Error sending email through Gmail:', error);
    return false;
  }
}

/**
 * Wysyła powiadomienie o usunięciu udostępnienia przez Gmail
 */
export async function sendSharingRevokedNotificationGmail(
  model: Model,
  recipient: string,
  language: Language = 'en'
): Promise<boolean> {
  if (!transporterGmail) {
    console.error('Gmail email service not initialized');
    return false;
  }
  
  // Pobierz adres email z konfiguracji lub zmiennych środowiskowych
  const fromEmail = process.env.GMAIL_FROM || process.env.GMAIL_USER || '"CAD Viewer App" <no-reply@cadviewer.app>';
  
  // Pobierz tłumaczenia dla wybranego języka
  const translations = getLanguageTranslations(language);
  
  try {
    const mailOptions = {
      from: fromEmail,
      to: recipient,
      subject: translations.email.sharingRevokedSubject.replace('{filename}', model.filename),
      html: `
        <h2>${translations.email.sharingRevokedTitle}</h2>
        <p>${translations.email.sharingRevokedText.replace('{filename}', `<strong>${model.filename}</strong>`)}</p>
        <p>${translations.email.linkNoLongerWorks}</p>
        <hr />
        <p style="color: #666; font-size: 12px;">
          ${translations.email.autoGeneratedMessage}
        </p>
      `,
      text: `
        ${translations.email.sharingRevokedTitle}
        
        ${translations.email.sharingRevokedText.replace('{filename}', model.filename)}
        
        ${translations.email.linkNoLongerWorks}
        
        ${translations.email.autoGeneratedMessage}
      `
    };
    
    const info = await transporterGmail.sendMail(mailOptions);
    console.log('Gmail revocation email sent, message ID:', info.messageId);
    return true;
  } catch (error) {
    console.error('Error sending revocation email through Gmail:', error);
    return false;
  }
}