import nodemailer from 'nodemailer';
import { Model } from '@shared/schema';
import { Language, getLanguageTranslations } from '../client/src/lib/translations';

// Konfiguracja do użycia z Gmail
let transporterGmail: nodemailer.Transporter | null = null;

interface GmailConfig {
  user: string;      // Adres email Gmail
  pass: string;      // Hasło aplikacji (App Password) z Gmail
  from?: string;     // Nagłówek "From" w wiadomościach (może być inny niż adres)
}

/**
 * Inicjalizuje serwis email na bazie konta Gmail
 */
export function initializeGmailService(config: GmailConfig): boolean {
  try {
    if (!config.user || !config.pass) {
      console.warn("Gmail credentials are missing, email notifications will not work correctly");
      return false;
    }
    
    // Inicjalizacja transportera Gmail
    transporterGmail = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: config.user,
        pass: config.pass,
      },
    });
    
    console.log("Gmail email service initialized successfully");
    return true;
  } catch (error) {
    console.error("Failed to initialize Gmail email service:", error);
    return false;
  }
}

/**
 * Wysyła e-mail z linkiem do udostępnionego modelu przez Gmail
 */
export async function sendShareNotificationGmail(
  model: Model, 
  recipient: string, 
  baseUrl: string,
  password?: string,
  language: Language = 'en'
): Promise<boolean> {
  if (!transporterGmail) {
    console.error('Gmail email service not initialized');
    return false;
  }
  
  // Pobierz adres email z konfiguracji lub zmiennych środowiskowych
  const fromEmail = process.env.GMAIL_FROM || process.env.GMAIL_USER || '"CAD Viewer App" <no-reply@cadviewer.app>';
  
  try {
    const shareUrl = `${baseUrl}/shared/${model.shareId}`;
    
    // Pobierz tłumaczenia dla wybranego języka
    const translations = getLanguageTranslations(language);
    
    const mailOptions = {
      from: fromEmail,
      to: recipient,
      subject: translations.email.shareSubject,
      html: `
        <h2>${translations.email.shareTitle}</h2>
        <p>${translations.email.modelShared.replace('{filename}', `<strong>${model.filename}</strong>`)}</p>
        <p>${translations.email.viewInstructions}</p>
        <p><a href="${shareUrl}" style="padding: 10px 20px; background-color: #4F46E5; color: white; text-decoration: none; border-radius: 5px;">
          ${translations.email.viewModel}
        </a></p>
        ${password ? `<p><strong>${translations.email.accessPassword}:</strong> ${password}</p>` : ''}
        <p>${translations.email.linkActiveText} ${model.shareExpiryDate 
          ? `${translations.email.until} ${new Date(model.shareExpiryDate).toLocaleDateString(language)}` 
          : translations.email.untilRevoked}.</p>
        <hr />
        <p style="color: #666; font-size: 12px;">
          ${translations.email.autoGeneratedMessage}
        </p>
      `,
      text: `
        ${translations.email.shareTitle}
        
        ${translations.email.modelShared.replace('{filename}', model.filename)}
        
        ${translations.email.viewAt}: ${shareUrl}
        
        ${password ? `${translations.email.accessPassword}: ${password}` : ''}
        
        ${translations.email.linkActiveText} ${model.shareExpiryDate 
          ? `${translations.email.until} ${new Date(model.shareExpiryDate).toLocaleDateString(language)}` 
          : translations.email.untilRevoked}.
        
        ${translations.email.autoGeneratedMessage}
      `
    };
    
    const info = await transporterGmail.sendMail(mailOptions);
    console.log('Gmail email sent, message ID:', info.messageId);
    return true;
  } catch (error) {
    console.error('Error sending email through Gmail:', error);
    return false;
  }
}

/**
 * Wysyła powiadomienie o usunięciu udostępnienia przez Gmail
 */
export async function sendSharingRevokedNotificationGmail(
  model: Model,
  recipient: string,
  language: Language = 'en'
): Promise<boolean> {
  if (!transporterGmail) {
    console.error('Gmail email service not initialized');
    return false;
  }
  
  // Pobierz adres email z konfiguracji lub zmiennych środowiskowych
  const fromEmail = process.env.GMAIL_FROM || process.env.GMAIL_USER || '"CAD Viewer App" <no-reply@cadviewer.app>';
  
  // Pobierz tłumaczenia dla wybranego języka
  const translations = getLanguageTranslations(language);
  
  try {
    const mailOptions = {
      from: fromEmail,
      to: recipient,
      subject: translations.email.sharingRevokedSubject.replace('{filename}', model.filename),
      html: `
        <h2>${translations.email.sharingRevokedTitle}</h2>
        <p>${translations.email.sharingRevokedText.replace('{filename}', `<strong>${model.filename}</strong>`)}</p>
        <p>${translations.email.linkNoLongerWorks}</p>
        <hr />
        <p style="color: #666; font-size: 12px;">
          ${translations.email.autoGeneratedMessage}
        </p>
      `,
      text: `
        ${translations.email.sharingRevokedTitle}
        
        ${translations.email.sharingRevokedText.replace('{filename}', model.filename)}
        
        ${translations.email.linkNoLongerWorks}
        
        ${translations.email.autoGeneratedMessage}
      `
    };
    
    const info = await transporterGmail.sendMail(mailOptions);
    console.log('Gmail revocation email sent, message ID:', info.messageId);
    return true;
  } catch (error) {
    console.error('Error sending revocation email through Gmail:', error);
    return false;
  }
}